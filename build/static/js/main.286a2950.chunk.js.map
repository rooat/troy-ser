{"version":3,"sources":["App.js","i18n/intl-provider.js","i18n/sm_zh.js","i18n/en_us.js","i18n/ko_kr.js","serviceWorker.js","index.js"],"names":["serverApi","showToast","type","msg","toast","position","POSITION","BOTTOM_CENTER","hideProgressBar","_fetch","_callee3","url","method","body","success","error","newBody","response","result","_Users_liujiantao_Dev_Project_React_troychain_register_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context3","prev","next","Object","entries","map","pair","concat","join","console","log","fetch","headers","Content-Type","sent","json","resp","state","datas","stop","lan2Sort","lan","configure","autoClose","draggable","InputWithTitle","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","this","props","title","assign","React","Component","App","_this","_Users_liujiantao_Dev_Project_React_troychain_register_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_liujiantao_Dev_Project_React_troychain_register_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_liujiantao_Dev_Project_React_troychain_register_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","onSubmit","_Users_liujiantao_Dev_Project_React_troychain_register_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__","mark","_callee","_this$state","email","vCode","loginPsd","tradePsd","inviteCode","_context","intl","abrupt","email_num","code","loginpwd","tradepwd","invite","global","currentLan","data","finishTimer","setState","onSendVCode","_callee2","_this$state2","_context2","locked","onSendCodeFetch","timer","setInterval","updateTimer","initSecond","btnText","clearInterval","onSwitchLanguage","acitve","sort","langList","href","window","location","inCode","slice","lastIndexOf","id","react_intl__WEBPACK_IMPORTED_MODULE_9__","_this2","_this$state3","_i18n_intl_provider__WEBPACK_IMPORTED_MODULE_12__","locale","onClick","onChange","e","target","value","react_toastify__WEBPACK_IMPORTED_MODULE_10__","messages","en","enUS","zh","smZh","ko","koKr","addLocaleData","_Users_liujiantao_Dev_Project_React_troychain_register_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_5__","IntlProvider","react_intl__WEBPACK_IMPORTED_MODULE_6__","children","PureComponent","sm_zh","login","inputemail","inputpsd","forgetpsd","nopsdregister","register","vcode","loginpsd","confrimpsd","inputvcode","confirmpsdagain","confrim","emailcantempty","vcodecantempty","loginpsdcantempty","psddiff","invitecode","inputinvitecode","invitecantenpty","tradepsd","inputtradepsd","tradecantempty","registersuccess","loginsuccess","inputloginpsd","appdl","sendvcode","checkenter","enteremail","sendagain","en_us","ko_kr","Boolean","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.286a2950.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { FormattedMessage } from 'react-intl'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport IntlProvider from './i18n/intl-provider'\n\nconst serverApi = \"http://13.124.2.239/apiserver/api/user\"\n\ntoast.configure({\n  autoClose: 2000,\n  draggable: false,\n  //etc you get the idea\n});\n\nfunction showToast(type,msg){\n  toast[type](msg, {\n    position: toast.POSITION.BOTTOM_CENTER,\n    hideProgressBar: true,\n  });\n}\n\nasync function _fetch(url,method,body,success,error){\n  let newBody = Object.entries(body).map((pair) => `${pair[0]}=${pair[1]}`).join('&')\n  console.log(\"参数\",newBody);\n  \n  let response = await fetch(serverApi + url,{\n    method,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body:newBody,\n  })\n  console.log('response==',response)\n  let result = await response.json()\n  if(result.resp.state === 0){\n    success(result.resp.datas)\n  }\n  if(result.resp.state === -1){\n    error(result.resp.datas)\n  }\n}\n\nfunction lan2Sort(lan){\n  if(lan === 'zh'){\n    return 0\n  }else if(lan === 'en'){\n    return 1\n  }else {\n    return 2\n  }\n}\n\nfunction sort2Lan(sort){\n  if(sort === 0){\n    return 'zh'\n  }else if(sort === 1){\n    return 'en'\n  }else if(sort === 2){\n    return 'ko'\n  }else {\n    return 'zh'\n  }\n}\nclass InputWithTitle extends React.Component{\n\n  render(){\n    return(\n      <div className=\"inputcontainer\" >\n        <div className=\"titlecontainer\">\n          <span >{this.props.title}</span>\n        </div>\n        <input {...this.props}  className=\"inputitem\" />\n      </div>\n    )\n  }\n}\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      email: '',\n      vCode: '',\n      loginPsd: '',\n      tradePsd: '',\n      inviteCode: '',\n\n      locked: false,\n      initSecond: 60,\n      btnText: this.intl('sendvcode'),\n      langList: ['繁体中文','English','한국어'],\n      acitve: 0,\n    }\n  }\n  componentWillMount(){\n    global.currentLan = 'zh'   \n    console.log(\"window.location.href\",);\n    let href = window.location.href\n    let inCode = href.slice(href.lastIndexOf('/')+1)\n    this.setState({\n      inviteCode: inCode\n    })\n  }\n  componentWillUnmount(){\n    clearInterval(this.timer)\n  }\n  onSubmit = async() => {\n    const { email, vCode, loginPsd, tradePsd, inviteCode } = this.state \n    if(!!!email || !!!vCode || !!!loginPsd || !!!tradePsd || !!!inviteCode){\n      showToast('warn',this.intl('checkenter'))\n      return \n    }\n\n    let reqBody = {\n        email_num: email,\n        code: vCode,\n        loginpwd: loginPsd,\n        tradepwd: tradePsd,\n        invite: inviteCode,\n        lan: lan2Sort(global.currentLan)\n    }\n\n    const success = (data) => {\n      showToast('success',data)\n      this.finishTimer()\n      this.setState({\n        email:'',\n        vCode:'',\n        loginPsd:'',\n        tradePsd:'',\n        inviteCode:'',\n      })\n      // console.log('注册data==',data)\n    }\n    const error = (msg) => {\n      showToast('error',msg)\n      // console.log('注册msg',msg)\n    }\n    _fetch('/register','POST',reqBody,success,error)\n    \n    \n  }\n\n  onSendVCode = async () => {\n    const { email,locked } = this.state \n    \n    if(locked === false){\n      if(!!!email){\n        showToast('warn',this.intl('enteremail'))\n        return \n      }\n      this.onSendCodeFetch()\n      this.setState({\n        locked: true\n      })\n      this.timer = setInterval(this.updateTimer,1000)\n\n    }    \n    \n  }\n  updateTimer = () => {\n    const { initSecond } = this.state \n    if(initSecond === 0){\n      this.finishTimer()\n    }else {\n      this.setState({\n        initSecond: initSecond - 1,\n        btnText: `${initSecond}  S`\n      })\n    }\n  }\n  finishTimer = () => {\n    clearInterval(this.timer)\n    this.setState({\n      initSecond: 60,\n      btnText: this.intl('sendvcode'),\n      locked: false\n    })\n  }\n  onSwitchLanguage = () => {\n    const { acitve } = this.state \n    this.setState({\n      acitve: acitve > 2 ? 0 : acitve + 1\n    },() => {\n      global.currentLan = sort2Lan(this.state.acitve)\n    })    \n  }\n  onSendCodeFetch(){\n    const { email } = this.state \n    let reqBody = {\n      email_num: email,\n      lan: lan2Sort(global.currentLan)\n    }\n    const success = (data) => {\n      showToast('success',data)\n    }\n    const error = (msg) => {\n      showToast('error',msg)\n    }\n    _fetch('/makecode',\"POST\",reqBody,success,error)\n  }\n  intl(id){\n    return(\n      <FormattedMessage id={id}/>\n    )\n  }\n\n  render(){\n    const { btnText,langList,acitve,inviteCode } = this.state\n    return(\n      <IntlProvider locale={global.currentLan}>\n          <div className=\"App\">      \n              <div onClick={this.onSwitchLanguage} className=\"language\">{langList[acitve+1>2?0:acitve+1]}</div>  \n              <InputWithTitle  type=\"text\" title={this.intl('email')} onChange={e => this.setState({email:e.target.value})}/>\n              <div className=\"vcodeinput\" >\n                <InputWithTitle type=\"text\" title={this.intl('vcode')}  onChange={e => this.setState({vCode:e.target.value})}/>\n                <div className=\"vcodebtn\" onClick={this.onSendVCode}>\n                  <span className=\"vcodetext\">{btnText}</span>\n                </div>\n              </div>\n              <InputWithTitle type=\"password\" title={this.intl('loginpsd')}  onChange={e => this.setState({loginPsd:e.target.value})}/>\n              <InputWithTitle type=\"password\" title={this.intl('tradepsd')}  onChange={e => this.setState({tradePsd:e.target.value})}/>\n              <InputWithTitle type=\"text\" value={inviteCode} title={this.intl('invitecode')}  onChange={e => this.setState({inviteCode:e.target.value})}/>\n              <button type=\"button\" className=\"button\" onClick={this.onSubmit}> \n                <span>{this.intl('register')}</span>\n              </button>\n              <div className=\"link\">\n                <a  href=\"http://amm.ivbs.talangidea.cn:81/Fok472\">{this.intl('appdl')}</a>\n              </div>\n              <ToastContainer />\n          </div>\n        </IntlProvider>\n    )\n  }\n}\n\n","import { IntlProvider as ReactIntlProvider,addLocaleData } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport smZh from './sm_zh.js';\nimport enUS from './en_us.js';\nimport koKr from './ko_kr.js';\n\nimport zh from 'react-intl/locale-data/zh';\nimport en from 'react-intl/locale-data/en';\nimport ko from 'react-intl/locale-data/ko';//韩语\n\n\nlet messages = {\n  \"en\": enUS,\n  \"zh\": smZh,\n  \"ko\": koKr,\n};\naddLocaleData([...zh,...en,...ko]);\n\n\nexport default class IntlProvider extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    // locale: PropTypes.string.isRequired,\n  };\n\n\n  render() {\n    return (\n        <ReactIntlProvider\n            locale={global.currentLan}\n            messages={messages[global.currentLan]}\n        >\n            {this.props.children}\n        </ReactIntlProvider>\n       \n      \n    );\n  }\n}\n\n","const sm_zh = {\n    'login':'登錄',\n    'inputemail':'請輸入郵箱',\n    'inputpsd':'請輸入密碼',\n    'forgetpsd':'忘記密碼',\n    'nopsdregister':'還沒有賬號？立即註冊',\n    'register':'註冊',\n    'email':'郵箱',\n    'vcode':'驗證碼',\n    'loginpsd':'登錄密碼',\n    'confrimpsd':'確認密碼',\n    'inputvcode':'請輸入驗證碼',\n    'confirmpsdagain':'請再次確認密碼',\n    'confrim':'確定',\n    'emailcantempty':'郵箱不能為空',\n    'vcodecantempty':'驗證碼不能為空',\n    'loginpsdcantempty':'登錄密碼不能為空',\n    'psddiff':'兩次密碼不一致',\n    'invitecode':'推薦碼',\n    'inputinvitecode':'請輸入推薦碼',\n    'invitecantenpty':'推薦碼不能為空',\n    'tradepsd':'交易密碼',\n    'inputtradepsd':'請輸入交易密碼',\n    'tradecantempty':'交易密碼不能為空',\n    'registersuccess':'註冊成功',\n    'loginsuccess':'登錄成功',\n    'inputloginpsd':'請輸入登錄密碼',\n    'appdl':'App下載',\n\n\n    'sendvcode':'發送驗證碼',\n    'checkenter':'請檢查輸入',\n    'enteremail':'請輸入郵箱地址',\n    'sendagain':'s後再次發送',\n\n}\nexport default sm_zh","const en_us = {\n    'login':'Login',\n    'inputemail':'please input your email\t',\n    'inputpsd':' Please enter your password\t',\n    'forgetpsd':' retrieve password\t',\n    'nopsdregister':'Not on Troy yet? Sign up now\t',\n    'register':'  Sign up\t',\n    'email':'Email',\n    'vcode':' SMS Verification code',\n    'loginpsd':'login password\t',\n    'confrimpsd':'confirm password',\n    'inputvcode':'please enter verification code',\n    'confirmpsdagain':'  Please confirm the password again\t',\n    'confrim':'  confirm\t',\n    'emailcantempty':'E-mail can\\'t be blank',\n    'vcodecantempty':'verification code can\\'t be blank',\n    'loginpsdcantempty':' Login password can\\'t be blank',\n    'psddiff':'  Two passwords are inconsistent',\n    'invitecode':' Referral code\t',\n    'inputinvitecode':'Please enter a referral code',\n    'invitecantenpty':'Referral code can\\'t be blank',\n    'tradepsd':'transaction password',\n    'inputtradepsd':' Please enter the transaction password',\n    'tradecantempty':'Transaction password can\\'t be blank\t',\n    'registersuccess':'registration succeeded\t',\n    'loginsuccess':' login succeeded',\n\n    'inputloginpsd':'Please enter your password',\n    'appdl':'App Download',\n\n\n    'sendvcode':'Send sms code',\n    'checkenter':'Check your enter',\n    'enteremail':'Enter email',\n    'sendagain':'s Send again',\n}\n\nexport default en_us","const ko_kr = {\n    'login':'로그인',                              \n    'inputemail':'이메일주소를 입력하세요',\n    'inputpsd':'비밀번호를 입력하세요',\n    'forgetpsd':'비밀번호 찾기',\n    'nopsdregister':'아직 계정이 없으세요? 회원 가입',\n    'register':'회원가입',\n    'email':'이메일',\n    'vcode':'인증코드',\n    'loginpsd':'비밀번호',\n    'confrimpsd':'비밀번호를 확인하세요',\n    'inputvcode':'인증코드를 입력하세요',\n    'confirmpsdagain':'비밀번호를 다시 확인하세요',\n    'confrim':'확인',\n    'emailcantempty':'이메일주소는 필수사항입니다',\n    'vcodecantempty':'인증코드는 필수사항입니다',\n    'loginpsdcantempty':'비밀번호는 필수사항입니다',\n    'psddiff':'비밀번호가 일치되지 않습니다',\n    'invitecode':'추천코드',\n    'inputinvitecode':'추천코드를 입력하세요',\n    'invitecantenpty':'추천코드는 필수사항입니다',\n    'tradepsd':'거래비밀번호',\n    'inputtradepsd':'거래비밀번호를 입력하세요',\n    'tradecantempty':'거래비밀번호는 필수사항입니다',\n    'registersuccess':'회원가입이 완료되었습니다',\n    'loginsuccess':'로그인이 성공되었습니다',\n\n    'inputloginpsd':'비밀번호를 입력하세요',\n    'appdl':'다운로드',\n\n    'sendvcode':'인증 코드 전송',\n    'checkenter':'입력을 확인하십시오.',\n    'enteremail':'이메일 주소를 입력하십시오.',\n    'sendagain':'s 다시 보내기',\n}\nexport default ko_kr","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   \n        <App />,\n     \n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}